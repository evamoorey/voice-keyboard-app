//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: pb/commands/commands.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Commands_CommandsClient`, then call methods of this protocol to make API calls.
internal protocol Commands_CommandsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Commands_CommandsClientInterceptorFactoryProtocol? { get }

  func addCommand(
    _ request: Commands_AddCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func deleteCommand(
    _ request: Commands_DeleteCommandRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getCommands(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse>

  func importCommands(
    _ request: Commands_ImportCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func exportCommands(
    _ request: Commands_ExportCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

extension Commands_CommandsClientProtocol {
  internal var serviceName: String {
    return "commands.Commands"
  }

  /// Unary call to AddCommand
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCommand(
    _ request: Commands_AddCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.addCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCommandInterceptors() ?? []
    )
  }

  /// Unary call to DeleteCommand
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteCommand.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteCommand(
    _ request: Commands_DeleteCommandRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.deleteCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCommandInterceptors() ?? []
    )
  }

  /// Unary call to GetCommands
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCommands(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse> {
    return self.makeUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.getCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCommandsInterceptors() ?? []
    )
  }

  /// Unary call to ImportCommands
  ///
  /// - Parameters:
  ///   - request: Request to send to ImportCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func importCommands(
    _ request: Commands_ImportCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.importCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportCommandsInterceptors() ?? []
    )
  }

  /// Unary call to ExportCommands
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exportCommands(
    _ request: Commands_ExportCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.exportCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportCommandsInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Commands_CommandsClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Commands_CommandsNIOClient")
internal final class Commands_CommandsClient: Commands_CommandsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Commands_CommandsClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Commands_CommandsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the commands.Commands service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Commands_CommandsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Commands_CommandsNIOClient: Commands_CommandsClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Commands_CommandsClientInterceptorFactoryProtocol?

  /// Creates a client for the commands.Commands service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Commands_CommandsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Commands_CommandsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Commands_CommandsClientInterceptorFactoryProtocol? { get }

  func makeAddCommandCall(
    _ request: Commands_AddCommandRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeDeleteCommandCall(
    _ request: Commands_DeleteCommandRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetCommandsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse>

  func makeImportCommandsCall(
    _ request: Commands_ImportCommandsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func makeExportCommandsCall(
    _ request: Commands_ExportCommandsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Commands_CommandsAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Commands_CommandsClientMetadata.serviceDescriptor
  }

  internal var interceptors: Commands_CommandsClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddCommandCall(
    _ request: Commands_AddCommandRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.addCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCommandInterceptors() ?? []
    )
  }

  internal func makeDeleteCommandCall(
    _ request: Commands_DeleteCommandRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.deleteCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCommandInterceptors() ?? []
    )
  }

  internal func makeGetCommandsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse> {
    return self.makeAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.getCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCommandsInterceptors() ?? []
    )
  }

  internal func makeImportCommandsCall(
    _ request: Commands_ImportCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.importCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportCommandsInterceptors() ?? []
    )
  }

  internal func makeExportCommandsCall(
    _ request: Commands_ExportCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.exportCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportCommandsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Commands_CommandsAsyncClientProtocol {
  internal func addCommand(
    _ request: Commands_AddCommandRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.addCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCommandInterceptors() ?? []
    )
  }

  internal func deleteCommand(
    _ request: Commands_DeleteCommandRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.deleteCommand.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteCommandInterceptors() ?? []
    )
  }

  internal func getCommands(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Commands_GetCommandsResponse {
    return try await self.performAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.getCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCommandsInterceptors() ?? []
    )
  }

  internal func importCommands(
    _ request: Commands_ImportCommandsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.importCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeImportCommandsInterceptors() ?? []
    )
  }

  internal func exportCommands(
    _ request: Commands_ExportCommandsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Commands_CommandsClientMetadata.Methods.exportCommands.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExportCommandsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Commands_CommandsAsyncClient: Commands_CommandsAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Commands_CommandsClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Commands_CommandsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Commands_CommandsClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'addCommand'.
  func makeAddCommandInterceptors() -> [ClientInterceptor<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'deleteCommand'.
  func makeDeleteCommandInterceptors() -> [ClientInterceptor<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getCommands'.
  func makeGetCommandsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse>]

  /// - Returns: Interceptors to use when invoking 'importCommands'.
  func makeImportCommandsInterceptors() -> [ClientInterceptor<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'exportCommands'.
  func makeExportCommandsInterceptors() -> [ClientInterceptor<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Commands_CommandsClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Commands",
    fullName: "commands.Commands",
    methods: [
      Commands_CommandsClientMetadata.Methods.addCommand,
      Commands_CommandsClientMetadata.Methods.deleteCommand,
      Commands_CommandsClientMetadata.Methods.getCommands,
      Commands_CommandsClientMetadata.Methods.importCommands,
      Commands_CommandsClientMetadata.Methods.exportCommands,
    ]
  )

  internal enum Methods {
    internal static let addCommand = GRPCMethodDescriptor(
      name: "AddCommand",
      path: "/commands.Commands/AddCommand",
      type: GRPCCallType.unary
    )

    internal static let deleteCommand = GRPCMethodDescriptor(
      name: "DeleteCommand",
      path: "/commands.Commands/DeleteCommand",
      type: GRPCCallType.unary
    )

    internal static let getCommands = GRPCMethodDescriptor(
      name: "GetCommands",
      path: "/commands.Commands/GetCommands",
      type: GRPCCallType.unary
    )

    internal static let importCommands = GRPCMethodDescriptor(
      name: "ImportCommands",
      path: "/commands.Commands/ImportCommands",
      type: GRPCCallType.unary
    )

    internal static let exportCommands = GRPCMethodDescriptor(
      name: "ExportCommands",
      path: "/commands.Commands/ExportCommands",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Commands_CommandsProvider: CallHandlerProvider {
  var interceptors: Commands_CommandsServerInterceptorFactoryProtocol? { get }

  func addCommand(request: Commands_AddCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func deleteCommand(request: Commands_DeleteCommandRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func getCommands(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Commands_GetCommandsResponse>

  func importCommands(request: Commands_ImportCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func exportCommands(request: Commands_ExportCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Commands_CommandsProvider {
  internal var serviceName: Substring {
    return Commands_CommandsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_AddCommandRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddCommandInterceptors() ?? [],
        userFunction: self.addCommand(request:context:)
      )

    case "DeleteCommand":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_DeleteCommandRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteCommandInterceptors() ?? [],
        userFunction: self.deleteCommand(request:context:)
      )

    case "GetCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Commands_GetCommandsResponse>(),
        interceptors: self.interceptors?.makeGetCommandsInterceptors() ?? [],
        userFunction: self.getCommands(request:context:)
      )

    case "ImportCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_ImportCommandsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportCommandsInterceptors() ?? [],
        userFunction: self.importCommands(request:context:)
      )

    case "ExportCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_ExportCommandsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeExportCommandsInterceptors() ?? [],
        userFunction: self.exportCommands(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Commands_CommandsAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Commands_CommandsServerInterceptorFactoryProtocol? { get }

  @Sendable func addCommand(
    request: Commands_AddCommandRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func deleteCommand(
    request: Commands_DeleteCommandRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func getCommands(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Commands_GetCommandsResponse

  @Sendable func importCommands(
    request: Commands_ImportCommandsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  @Sendable func exportCommands(
    request: Commands_ExportCommandsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Commands_CommandsAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Commands_CommandsServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Commands_CommandsServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Commands_CommandsServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddCommand":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_AddCommandRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddCommandInterceptors() ?? [],
        wrapping: self.addCommand(request:context:)
      )

    case "DeleteCommand":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_DeleteCommandRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeDeleteCommandInterceptors() ?? [],
        wrapping: self.deleteCommand(request:context:)
      )

    case "GetCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Commands_GetCommandsResponse>(),
        interceptors: self.interceptors?.makeGetCommandsInterceptors() ?? [],
        wrapping: self.getCommands(request:context:)
      )

    case "ImportCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_ImportCommandsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeImportCommandsInterceptors() ?? [],
        wrapping: self.importCommands(request:context:)
      )

    case "ExportCommands":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Commands_ExportCommandsRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeExportCommandsInterceptors() ?? [],
        wrapping: self.exportCommands(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Commands_CommandsServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCommandInterceptors() -> [ServerInterceptor<Commands_AddCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'deleteCommand'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteCommandInterceptors() -> [ServerInterceptor<Commands_DeleteCommandRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCommandsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Commands_GetCommandsResponse>]

  /// - Returns: Interceptors to use when handling 'importCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeImportCommandsInterceptors() -> [ServerInterceptor<Commands_ImportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'exportCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExportCommandsInterceptors() -> [ServerInterceptor<Commands_ExportCommandsRequest, SwiftProtobuf.Google_Protobuf_Empty>]
}

internal enum Commands_CommandsServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Commands",
    fullName: "commands.Commands",
    methods: [
      Commands_CommandsServerMetadata.Methods.addCommand,
      Commands_CommandsServerMetadata.Methods.deleteCommand,
      Commands_CommandsServerMetadata.Methods.getCommands,
      Commands_CommandsServerMetadata.Methods.importCommands,
      Commands_CommandsServerMetadata.Methods.exportCommands,
    ]
  )

  internal enum Methods {
    internal static let addCommand = GRPCMethodDescriptor(
      name: "AddCommand",
      path: "/commands.Commands/AddCommand",
      type: GRPCCallType.unary
    )

    internal static let deleteCommand = GRPCMethodDescriptor(
      name: "DeleteCommand",
      path: "/commands.Commands/DeleteCommand",
      type: GRPCCallType.unary
    )

    internal static let getCommands = GRPCMethodDescriptor(
      name: "GetCommands",
      path: "/commands.Commands/GetCommands",
      type: GRPCCallType.unary
    )

    internal static let importCommands = GRPCMethodDescriptor(
      name: "ImportCommands",
      path: "/commands.Commands/ImportCommands",
      type: GRPCCallType.unary
    )

    internal static let exportCommands = GRPCMethodDescriptor(
      name: "ExportCommands",
      path: "/commands.Commands/ExportCommands",
      type: GRPCCallType.unary
    )
  }
}
